Resources:

          #######
          # VPC #
          #######

  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: ${param:VPC}
      Tags: 
        - Key: Name
          Value: ${self:service}-VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: Internet Gateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteAssotiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetA


          ######################################
          # Subnets:                           #
          #  1 Public                          #
          #  2 Private (DB Master / DB Backup) #
          ######################################

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: ${self:provider.region}a
      CidrBlock: ${param:SubnetA}
      Tags: 
        - Key: Name
          Value: Public Subnet

  DBSubA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: ${self:provider.region}a
      CidrBlock: ${param:DBSubA}
      Tags: 
        - Key: Name
          Value: DB Master Subnet

  DBSubB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: ${self:provider.region}b
      CidrBlock: ${param:DBSubB}
      Tags: 
        - Key: Name
          Value: DB Backup Subnet

          ######################
          # RDS MySQL Database #
          ######################

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Databases Subnet Group
      DBSubnetGroupName: DBSG
      SubnetIds: 
        - !Ref DBSubA
        - !Ref DBSubB
      Tags: 
        - Key: Name
          Value: Databases Subnet Group

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SSH / mySQL ACCESS from JumpBox"
      GroupName: RDSSG
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref JumpBoxSecurityGroup
          Description: "mySQL"
          FromPort: 3306
          ToPort: 3306
          IpProtocol: tcp
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RDS Security Group

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: "20"
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: masterdb
      DBInstanceClass: db.t2.micro
      DBName: ${param:DBName}
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: mysql
      EngineVersion: 8.0.27
      MasterUsername: ${param:DBUser}
      MasterUserPassword: ${param:DBPass}
      MultiAZ: false
      Port: 3306
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup

  # SQS2RDS:
  # Type: AWS::EC2::SecurityGroup
  # Properties: 
  #   GroupDescription: "SQS2RDS"
  #   GroupName: SQS2RDS
  #   SecurityGroupIngress: 
  #     -   CidrIp: !Ref DBSubA
  #         FromPort: 3306
  #         IpProtocol: tcp
  #         ToPort: 3306
  #     -   CidrIp: !Ref DBSubB
  #         FromPort: 3306
  #         IpProtocol: tcp
  #         ToPort: 3306
  #   VpcId: !Ref VPC
  #   Tags: 
  #     - Key: Name
  #       Value: SQS2RDS

          ####################
          # JumpBox Instance #
          ####################

  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "JumpBox SSH Access Group"
      GroupName: JBSG
      SecurityGroupIngress: 
        -   CidrIp: ${param:Admin}
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: JumpBox Security Group

  JumpBoxEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-08e4e35cccc6189f4
      InstanceType: t2.micro
      KeyName: hristijan
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            sudo yum update -y
            sudo yum install mysql -y
            cat <<EOF | mysql --host=${RDSInstance.Endpoint.Address} --user=${param:DBUser} --password=${param:DBPass}

            USE ${param:DBName};
            CREATE TABLE IF NOT EXISTS WeatherApp (
                messageId VARCHAR(255) NOT NULL,,
                City VARCHAR(255) NOT NULL,
                Country VARCHAR(255) NOT NULL,
                Description VARCHAR(255) NOT NULL,
                Temperature INT NOT NULL,
                Temp_min INT NOT NULL,
                Temp_max INT NOT NULL,
                Date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP   

            ); 

            EOF
      NetworkInterfaces:       
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref SubnetA
          DeviceIndex: "0"
          GroupSet:
            - !Ref JumpBoxSecurityGroup
      Tags: 
        - Key: Name
          Value: JumpBox EC2 Instance

          ##############
          # WeatherApp # 
          ##############


        ##############
        # SNS Topics #
        ##############

  myWeatherTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Sending"
      TopicName: myWeatherTopic

  SNSEMAIL:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "G2 WeatherApp"
      TopicName: SNSEMAIL

      ###############
      # e-mail subs # 
      ###############
  sub1:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: hridimoski@gmail.com
      Protocol: email
      TopicArn: !Ref SNSEMAIL

  sub2:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: alekss.stevanoski@gmail.com
      Protocol: email
      TopicArn: !Ref SNSEMAIL

        #######
        # QUE #  
        #######      

  myRDSQueue:
    Type: "AWS::SQS::Queue"
    Properties:
        QueueName: myRDSQueue
        DelaySeconds: 0
        MaximumMessageSize: 4096
        ReceiveMessageWaitTimeSeconds: 10
        VisibilityTimeout: 120
        Tags:
          - Key: Name
            Value: SQS2RDS

  snsTomyRDSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "allow-sns-messages"
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt myRDSQueue.Arn
            Action: "SQS:SendMessage"
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref myWeatherTopic
      Queues:
        - Ref: myRDSQueue

  myRDSQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref myWeatherTopic
      Endpoint: !GetAtt myRDSQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true

